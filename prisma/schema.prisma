// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id                      String                   @id @default(cuid())
    email                   String                   @unique
    emailVerified           DateTime?
    image                   String?
    name                    String?
    userPreferences         UserPreferences?
    userPreferencesId       Int?
    transactions            Transaction[]
    expenseSplittingWindows ExpenseSplittingWindow[]
    authorizedUsers         User[]                   @relation("authorizedUsers")
    authorizedBy      User[]                   @relation("authorizedUsers")
    accounts                Account[]
    sessions                Session[]
    SharedPercentage        SharedPercentage[]
}

model Transaction {
    id                       Int                     @id @default(autoincrement())
    createdAt                DateTime                @default(now()) @db.Timestamp(3)
    updatedAt                DateTime                @default(now()) @db.Timestamp(3)
    title                    String
    date                     String
    notes                    String
    price                    Int
    shared                   SharedTransaction?
    sharedId                 Int?
    User                     User?                   @relation(fields: [userId], references: [id])
    userId                   String?
    ExpenseSplittingWindow   ExpenseSplittingWindow? @relation(fields: [expenseSplittingWindowId], references: [id])
    expenseSplittingWindowId Int?
}

model SharedTransaction {
    id               Int                @id @default(autoincrement())
    createdAt        DateTime           @default(now()) @db.Timestamp(3)
    updatedAt        DateTime           @default(now()) @db.Timestamp(3)
    transaction      Transaction        @relation(fields: [transactionId], references: [id])
    transactionId    Int                @unique
    sharedPercentage Int
    SharedPercentage SharedPercentage[]
}

model SharedPercentage {
    id                  Int               @id @default(autoincrement())
    createdAt           DateTime          @default(now()) @db.Timestamp(3)
    updatedAt           DateTime          @default(now()) @db.Timestamp(3)
    sharedPercentage    Int
    sharedTransaction   SharedTransaction @relation(fields: [sharedTransactionId], references: [id])
    sharedTransactionId Int
    user                User              @relation(fields: [userId], references: [id])
    userId              String
}

model ExpenseSplittingWindow {
    id              Int           @id @default(autoincrement())
    createdAt       DateTime      @default(now()) @db.Timestamp(3)
    updatedAt       DateTime      @default(now()) @db.Timestamp(3)
    startDate       DateTime      @db.Date
    endDate         DateTime      @db.Date
    title           String        @default("Expense Splitting Window")
    notes           String
    authorizedUsers User[]
    transactions    Transaction[]
    inactive        Boolean       @default(false)
}

model UserPreferences {
    id                Int      @id @default(autoincrement()) @unique
    user              User     @relation(fields: [userId], references: [id])
    userId            String   @unique
    createdAt         String
    updatedAt         String
    splittingUserId String  @default("")
    currency   String   @default("USD")
    language   String   @default("en")
    timezone   String   @default("America/Chicago")
    dateFormat String   @default("MM/dd/yyyy")
    timeFormat String   @default("hh:mm a")
    theme      String   @default("dark")
    preferredSort       String   @default("date")
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
